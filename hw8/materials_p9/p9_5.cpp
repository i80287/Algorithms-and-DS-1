#include <unistd.h>

#include <algorithm>
#include <any>
#include <array>
#include <bit>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <numbers>
#include <numeric>
#include <random>
#include <set>
#include <type_traits>
#include <utility>
#include <vector>

using namespace std;
using u8                         = uint8_t;
using u16                        = uint16_t;
using u32                        = uint32_t;
using u64                        = uint64_t;
using u128                       = __uint128_t;
using i8                         = int8_t;
using i16                        = int16_t;
using i32                        = int32_t;
using i64                        = int64_t;
using i128                       = __int128_t;
inline constexpr size_t n        = 5;
inline constexpr size_t m        = 5;
inline constexpr size_t kMaxW    = 85;
inline constexpr array<i32, 5> p = {1, 2, 3, 4, 5};
enum class Engine : u32 {
    kFirst,
    kSecond,
    kThird,
    kFourth,
    kFifth,
};
static constinit array<array<Engine, m>, n> dp{};

constexpr bool correct_engine(Engine e) noexcept {
    return u32(e) - u32(Engine::kFirst) <= u32(Engine::kFifth) - u32(Engine::kFirst);
}

static Engine get_max_engine(size_t i, size_t j) noexcept {
    assert(i < n && j < n);
    auto update_mask = [](u32& mask, const size_t i1, const size_t j1) noexcept {
        if (i1 >= n || j1 >= m) [[unlikely]] {
            return;
        }
        const Engine d = dp[i1][j1];
        assert(correct_engine(d));
        const size_t idx = u32(d);
        mask |= 1u << idx;
    };

    u32 mask = 0;
    update_mask(mask, i - 1, j);
    update_mask(mask, i + 1, j);
    update_mask(mask, i, j - 1);
    update_mask(mask, i, j + 1);
    const Engine max_engine = Engine(std::countr_one(mask));
    assert(correct_engine(max_engine));
    return max_engine;
};

inline constexpr double kGamma = 0.9999999;
static_assert(0 < 1 * kGamma && 1 * kGamma < 1);
inline constexpr double kMinGamma = 1e-4;
static_assert(0 < kMinGamma && kMinGamma < kGamma);
inline constexpr i32 kMaxTime    = 4;
inline constexpr u64 kTotalIters = u64(5e5);

// static volatile bool is_running = true;
// static void sighandler(int) {
//     is_running = false;
// }
// #include <csignal>
// __attribute__((constructor)) static void setup_signal_handler() {
//     std::signal(SIGALRM, sighandler);
// }

static i64 solve(uint_fast32_t rndseed) noexcept {
    u32 x = 0;
    u32 y = 0;
    static_assert(int(Engine::kFirst) == 0);
    memset(&dp, 0, sizeof(dp));
    i64 ans    = n * m * p[u32(Engine::kFirst)];
    i64 maxans = ans;
    mt19937 rnd{rndseed};
    uniform_real_distribution<double> dist(0, 1);
    // i64 start = clock();
    // assert(start != -1);
    // is_running = true;
    // {
    //     errno = 0;
    //     alarm(kMaxTime);
    //     if (errno) {
    //         perror("alarm");
    //         return -1;
    //     }
    // }
    double t_k = 1;
    u64 iters  = kTotalIters;
    // clock() - start < i64(kMaxTime * CLOCKS_PER_SEC)
    // is_running
    for (; iters > 0; t_k = max(t_k * kGamma, kMinGamma), iters--) {
        u32 new_x = 0;
        u32 new_y = 0;
        do {
            const uint_fast32_t word = rnd();
            u32 shift                = (word) % 2 == 0 ? 1u : -1u;
            bool is_x                = (word >> 16) % 2 == 0;
            new_x                    = is_x ? x + shift : x;
            new_y                    = is_x ? y : y + shift;
        } while (new_x >= n || new_y >= m);

        const Engine e        = get_max_engine(new_x, new_y);
        const auto curr_power = p[u32(dp[new_x][new_y])];
        __attribute__((assume(curr_power <= 5)));
        __attribute__((assume(1 <= curr_power)));
        const auto new_power = p[u32(e)];
        __attribute__((assume(new_power <= 5)));
        __attribute__((assume(1 <= new_power)));
        const auto delta = new_power - curr_power;
        if (delta >= 0 || dist(rnd) <= std::exp(delta / t_k)) {
            x        = new_x;
            y        = new_y;
            dp[x][y] = e;
            ans += delta;
            maxans = max(maxans, ans);
        }
    }

    // printf("seed = %luul, | ans = %ld | maxans = %ld | temp = %.30e\n", rndseed, ans, maxans, t_k);
    return maxans;
}

consteval auto getusedseeds() {
    array usedseeds = {
        3499211612ul, 581869302ul,  3890346734ul, 3586334585ul, 545404204ul,  4161255391ul,
        3922919429ul, 949333985ul,  2715962298ul, 1323567403ul, 418932835ul,  2350294565ul,
        1196140740ul, 809094426ul,  2348838239ul, 4264392720ul, 2867509146ul, 474196102ul,
        703781843ul,  3309964376ul, 711599907ul,  683615989ul,  338169617ul,  3137646144ul,
        3314578406ul, 3107829462ul, 155930080ul,  4147273256ul, 1837656389ul, 1920301509ul,
        3823959389ul, 2685341574ul, 3813582755ul, 1582367485ul, 3528474974ul, 455833379ul,
        1000015488ul, 337443534ul,  3154151458ul, 2844703774ul, 3944579001ul, 2377180580ul,
        1894961287ul, 1884369017ul, 1718583129ul, 22848246ul,   2058476256ul, 3062432550ul,
        563653486ul,  3956173922ul, 1136015380ul, 2810781104ul, 3662765955ul, 1347751359ul,
        2830366013ul, 1757015876ul, 524488555ul,  38441008ul,   1917780949ul, 1682699065ul,
        2531305672ul, 1668346776ul, 432419431ul,  871627541ul,  4176024009ul, 1372440398ul,
        166185564ul,  2063456900ul, 3571155065ul, 3335584902ul, 2807688561ul, 1692519393ul,
        2720338660ul, 890927181ul,  4037574876ul, 3762139383ul, 796897451ul,  858557331ul,
        552086426ul,  3068018460ul, 3260808756ul, 21546989ul,   976106213ul,  1508494279ul,
        3546904243ul, 2077181365ul, 2991910416ul, 3404603848ul, 89574866ul,   2728528615ul,
        3900819833ul, 3196018960ul, 74913847ul,   2032905565ul, 1358900186ul, 205262659ul,
        1559159382ul, 1786161308ul, 1426699672ul, 781987320ul,  2774109933ul, 1875833653ul,
        3283172992ul, 3229630540ul, 3411310128ul, 1064058562ul, 858818462ul,  2827057676ul,
        3228175076ul, 1246229178ul, 1100374705ul, 901659876ul,  3015050204ul, 3360081791ul,
        1971545741ul, 3654852128ul, 3424756711ul, 3483617190ul, 409489404ul,  1554607852ul,
        569811583ul,  2612431952ul, 2893827883ul, 287438101ul,  4161390381ul, 1167525580ul,
        2360902684ul, 494622850ul,  2553927824ul, 3038172971ul, 1454120388ul, 4012248109ul,
        413319984ul,  2470976060ul, 2375993008ul, 1183384583ul, 3187517016ul, 2445810398ul,
        1523768881ul, 266306187ul,  2891262092ul, 1492732654ul, 433911758ul,  4188829613ul,
        1207375046ul, 2735984178ul, 849237742ul,  919676737ul,  2984937888ul, 3628931575ul,
        4291253119ul, 1305865504ul, 720424681ul,  3451952044ul, 1407531801ul, 422763633ul,
        3137807960ul, 1321999496ul, 812339551ul,  3475501415ul, 516044612ul,  27146702ul,
        742479659ul,  2794741250ul, 2976538869ul, 2709994510ul, 1847573092ul, 3948612232ul,
        4065948072ul, 449998183ul,  4097964121ul, 3878945214ul, 1869096678ul, 2963612545ul,
        868204634ul,  687733122ul,  697290099ul,  2413993880ul, 1467751842ul, 1599027288ul,
        952784363ul,  3287339476ul, 1254696281ul, 2804845667ul, 936704358ul,  2639462090ul,
        828975948ul,  51504217ul,   721689376ul,  2099015103ul, 1404920315ul, 3522466150ul,
        3022490284ul, 117351629ul,  585552600ul,  896988235ul,  1877636563ul, 1132011235ul,
        4142660605ul, 2440899292ul, 4170952274ul, 2210328448ul, 1078184120ul, 3918647070ul,
        2486328190ul, 3439132529ul, 173963684ul,  4122494746ul, 2257038663ul, 2700604258ul,
        4178049676ul, 3182859425ul, 2184080919ul, 1612402134ul, 134011577ul,  1339870039ul,
        3933968530ul, 2303820767ul, 1424360492ul, 2672279883ul, 3581386640ul, 859374006ul,
        2388521391ul, 2680026450ul, 4236833050ul, 1295166112ul, 2106513284ul, 4155648577ul,
        422191109ul,  663759049ul,  1556115633ul, 2164087171ul, 3795430010ul, 1603299096ul,
        3379417375ul, 2440881154ul, 3882461433ul, 2311555172ul, 2047220286ul, 2027513345ul,
        3528231162ul, 2123733845ul, 1631606484ul, 913776718ul,  952019616ul,  3905035826ul,
        2425569727ul, 2506348351ul, 509536283ul,  3618627ul,    954995134ul,  3830625442ul,
        1005857114ul, 1665891070ul, 3337353164ul, 2428830772ul, 1518062460ul, 170883473ul,
        3734893890ul, 454194197ul,  1993224096ul, 3379564225ul, 2721154812ul, 2453632879ul,
        867235034ul,  3913839330ul, 436925346ul,  3916953692ul, 1948123779ul, 3988794067ul,
        3307348414ul, 987949776ul,  1916886024ul, 624428701ul,  1798525786ul, 1417826178ul,
        31558463ul,   2479097422ul, 3035392116ul, 2167029232ul, 3299546245ul, 4247955400ul,
        3555292012ul, 255043614ul,  1099286972ul, 42505166ul,   912734025ul,  4065245346ul,
        636471663ul,  1577943008ul, 2237550009ul, 4096065664ul, 21256986ul,   3691441476ul,
        1590531363ul, 3476993096ul, 314032758ul,  3498391420ul, 914237395ul,  414813589ul,
        85044130ul,   950622412ul,  1681129097ul, 1370659394ul, 4008086228ul, 574818119ul,
        1473127939ul, 1743855729ul, 1362859138ul, 2769965198ul, 2768649802ul, 2522053107ul,
        4162574102ul, 3539375122ul, 3589732402ul, 1280350010ul, 28657523ul,   308399118ul,
        1129957354ul, 145115916ul,  1042882822ul, 2498699684ul, 1703980131ul, 589231514ul,
        3103809014ul, 1721465742ul, 1837589472ul, 3717015050ul, 3174993130ul, 2475108049ul,
        2390838430ul, 4246924474ul, 1772144661ul, 1279509520ul, 4139557731ul, 4127454137ul,
        2548338788ul, 376670822ul,  215634372ul,  30781424ul,   4069404362ul, 3091762603ul,
        3574398000ul, 4002910242ul, 1169910666ul, 406023784ul,  1340318588ul, 2386402979ul,
        3207667711ul, 332676175ul,  3985202018ul, 3786062613ul, 3033411839ul, 3256502512ul,
        3266078641ul, 1778453124ul, 1509837839ul, 4000322270ul, 727953117ul,  3689445686ul,
        2374581838ul, 2715555263ul, 3753325916ul, 1039212211ul, 2654842374ul, 1580690165ul,
        3589235134ul, 4098858234ul, 638326581ul,  4028992197ul, 3906663543ul, 3591045368ul,
        2296523171ul, 1295151849ul, 2221829743ul, 224534282ul,  1329595494ul, 3657458310ul,
        3419421820ul, 3279881799ul, 4170978072ul, 174028095ul,  413951246ul,  1288381195ul,
        2568251915ul, 4101884434ul, 63453793ul,   2411149509ul, 2455033391ul, 4120724092ul,
        3718534782ul, 1974217033ul, 1040966254ul, 4183017741ul, 2588874739ul, 2862529741ul,
        2735898169ul, 3878982136ul, 2755454444ul, 2879701102ul, 300941916ul,  657301420ul,
        1287469851ul, 1252690631ul, 354093051ul,  1429595903ul, 1489561338ul, 2183199019ul,
        482694904ul,  1444321522ul, 2591917840ul, 3617744880ul, 3607018261ul, 1811794039ul,
        1427443556ul, 2517787479ul, 2723191484ul, 3001112846ul, 3734373070ul, 535819383ul,
        3913263880ul, 1349543237ul, 780904162ul,  1796906622ul, 3288736653ul, 2117232940ul,
        581826312ul,  789987304ul,  2817659218ul, 753099763ul,  3006109295ul, 3523088786ul,
        1237381411ul, 1621841827ul, 1560729220ul, 488378575ul,  310294813ul,  3471837393ul,
        1605168805ul, 4168850584ul, 422797378ul,  1251052363ul, 3115340314ul, 470816233ul,
        2172400884ul, 4235288813ul, 4158722831ul, 3428663594ul, 3674891302ul, 390276594ul,
        3714367619ul, 41521553ul,   1123684316ul, 1547505034ul, 1593110101ul, 1202173795ul,
        1765658751ul, 3443523518ul, 1636031850ul, 665469542ul,  411785597ul,  180649478ul,
        3564854331ul, 904714539ul,  2206399083ul, 2770139173ul, 3299831378ul, 995037050ul,
        817212249ul,  1108099373ul, 459791970ul,  2160971861ul, 54027052ul,   8452648ul,
        937232930ul,  3056703341ul, 2243781195ul, 3923329282ul, 240611165ul,  3024116786ul,
        2152899089ul, 2884539235ul, 2786402203ul, 4213039025ul, 1374528383ul, 3123309725ul,
        2699017579ul, 2518026339ul, 4035418769ul, 3544877797ul, 3533751939ul, 4238108746ul,
        2352145799ul, 3349109693ul, 1646944996ul, 3932602224ul, 4155057960ul, 3493586199ul,
        1674544187ul, 741323255ul,  3902763920ul, 633743219ul,  3901744887ul, 585230963ul,
        460767628ul,  239338185ul,  2548229480ul, 2939014711ul, 3207176814ul, 3072621631ul,
        2412680342ul, 1661067720ul, 3858843344ul, 3744427981ul, 40078499ul,   441122895ul,
        641964112ul,  2393182670ul, 3219376117ul, 2535461442ul, 342665144ul,  755772416ul,
        3634045896ul, 2273206551ul, 156929222ul,  3103244055ul, 3173343923ul, 1354269877ul,
        1902065864ul, 432496952ul,  2999232586ul, 3407510509ul, 3892302386ul, 3396678744ul,
        3241445993ul, 3858828549ul, 3237515783ul, 735051414ul,  2253459062ul, 664529741ul,
        2150578418ul, 3320807883ul, 724731074ul,  2246239059ul, 1103795346ul, 3995172739ul,
        3191131638ul, 900964463ul,  1487085100ul, 3483401642ul, 1638672507ul, 1220157029ul,
        3335382011ul, 278695231ul,  539898456ul,  2536445877ul, 3730084594ul, 3310380145ul,
        4036868888ul, 2509838970ul, 2315158772ul, 2445683067ul, 996284904ul,  2893849156ul,
        3311743735ul, 1625777447ul, 268599962ul,  2611237280ul, 2584947190ul, 2003576827ul,
        733666449ul,  2829151700ul, 3079631157ul, 872511337ul,  1184662333ul, 1820856020ul,
        3581614343ul, 399648553ul,  3683353319ul, 2779209348ul, 880299362ul,  4143809248ul,
        239384036ul,  2256118148ul, 1958021373ul, 4225736609ul, 585907386ul,  3133568377ul,
        1648951163ul, 3624875779ul, 553946270ul,  74927553ul,   3369273588ul, 2331652505ul,
        3971422147ul, 1406909190ul, 1660441680ul, 532767599ul,  1127116268ul, 1127334835ul,
        3940379661ul, 2275273618ul, 3826830045ul, 4028876536ul, 1575661666ul, 1514852105ul,
        4058511792ul, 1746058386ul, 308972774ul,  846191232ul,  818826447ul,  1723934374ul,
        4253092563ul, 1578661611ul, 3265424092ul, 850934564ul,  2058040175ul, 3001841758ul,
        3423017742ul, 3671693858ul, 261466552ul,  2690180529ul, 1165492230ul, 627062262ul,
        2628985942ul, 562322948ul,  1862871663ul, 3755012839ul, 22274363ul,   381328746ul,
        3600717414ul, 1323420851ul, 147002202ul,  3509362596ul, 3275597277ul, 2716514955ul,
        187668835ul,  3808919829ul, 3975942183ul, 544963633ul,  3380831842ul, 3058384821ul,
        2841909813ul, 1329632387ul, 1644959345ul, 3909586661ul, 4062594976ul, 1155588924ul,
        2411172797ul, 4217318848ul, 2026663972ul, 2846138349ul, 1843492604ul, 3446095057ul,
        2193591949ul, 4285411097ul, 2093216653ul, 2797729379ul, 962956861ul,  1691128815ul,
        202169128ul,  2860554563ul, 3724458209ul, 1362331938ul, 4216320033ul, 1801744242ul,
        3446878180ul, 3672887204ul, 269574436ul,  3838641297ul, 3655724335ul, 4070175886ul,
        3456753492ul, 142773247ul,  2239851434ul, 2415666104ul, 539513104ul,  3343717443ul,
        1414311678ul, 2662304059ul, 3530806840ul, 2110781156ul, 2626617846ul, 1622671228ul,
        4156816172ul, 3591240660ul, 684968799ul,  1159037070ul, 1519640550ul, 71904100ul,
        1317655682ul, 1587120482ul, 483178158ul,  967907732ul,  3083017447ul, 2939796973ul,
        2926773996ul, 497113934ul,  1620181839ul, 4280015635ul, 965119597ul,  3797349584ul,
        1122571577ul, 3969250797ul, 3769495994ul, 3367627009ul, 3771666063ul, 3822345425ul,
        1065702906ul, 2497986824ul, 3547602459ul, 3094054228ul, 3828221783ul, 83098409ul,
        2759098338ul, 3034610449ul, 2582938752ul, 261180701ul,  718420061ul,  1121590313ul,
        1192662312ul, 2015785720ul, 1612040992ul, 3324882705ul, 3133155734ul, 1222082491ul,
        836658952ul,  2367796735ul, 1355252144ul, 21633388ul,   2092522738ul, 1557676179ul,
        2568733230ul, 3109743854ul, 4228594364ul, 2025262935ul, 1786960217ul, 2875392763ul,
        2476092601ul, 1070773173ul, 662876183ul,  2391445076ul, 1055002850ul, 1674793356ul,
        208724767ul,  2225614986ul, 4075831108ul, 1976235200ul, 2859470970ul, 3054424469ul,
        330089046ul,  2444449892ul, 630488451ul,  1743816286ul, 4014331229ul, 2225622041ul,
        4293184574ul, 2753849030ul, 352432883ul,  1926488583ul, 2117068596ul, 3746022371ul,
        3400714019ul, 3763804172ul, 4227329728ul, 4071362189ul, 486368628ul,  3239899938ul,
        4065240503ul, 2726202178ul, 1711031493ul, 85555485ul,   3214535955ul, 838831347ul,
        2170341130ul, 3122101934ul, 2610331741ul, 3238633261ul, 461588353ul,  3809186629ul,
        3559733171ul, 460035369ul,  1725137057ul, 2230124047ul, 811947367ul,  2084790376ul,
        2064377571ul, 2863291191ul, 222394043ul,  2221335550ul, 631943387ul,  3744395483ul,
        930340951ul,  2382433882ul, 176440720ul,  4200760066ul, 2671032699ul, 37108132ul,
        2586183984ul, 3043051352ul, 2848621996ul, 1923916609ul, 588003240ul,  992851266ul,
        3096273993ul, 2869934145ul, 3919200938ul, 168087257ul,  3312895031ul, 2820961346ul,
        4056181228ul, 3910978189ul, 4167786493ul, 3430975213ul, 3559169960ul, 2482515109ul,
        1335064120ul, 1242316300ul, 5734811ul,    2126098792ul, 1240198793ul, 2116416664ul,
        2016404659ul, 532825017ul,  2682163362ul, 3095593936ul, 2208632592ul, 4065159090ul,
        3066918456ul, 2605028773ul, 2059543015ul, 3665796814ul, 528754920ul,  1149154352ul,
        153721829ul,  1881320944ul, 3184194988ul, 2510505533ul, 1181579169ul, 2083917656ul,
        3099611518ul, 1201871715ul, 3773360942ul, 1331519866ul, 14552405ul,   1419249414ul,
        3058636428ul, 1361247573ul, 225329442ul,  1172623016ul, 3034328281ul, 1642870612ul,
        3562259636ul, 3417136930ul, 1460304377ul, 3040737362ul, 1260687048ul, 3363304341ul,
        3714266495ul, 4105844640ul, 560153587ul,  3414024335ul, 1236281336ul, 801659590ul,
        3231617960ul, 4102361836ul, 2198715915ul, 2783074314ul, 3801615837ul, 1071140474ul,
        376095289ul,  447140192ul,  1773492591ul, 1908580292ul, 57364634ul,   1197714015ul,
        1428817652ul, 3608189502ul, 2739604831ul, 356287450ul,  776598593ul,  948926728ul,
        2360330719ul, 3579255748ul, 181008005ul,  2385225632ul, 1081861738ul, 414076121ul,
        1981551455ul, 2909671873ul, 1332528373ul, 1891819276ul, 2705451405ul, 2172435873ul,
        2789693024ul, 407096397ul,  1615701746ul, 3536027824ul, 322658252ul,  4288390331ul,
        2777821903ul, 97576348ul,
    };
    ranges::sort(usedseeds);
    return usedseeds;
}

int main() {
    srand(u32(time(nullptr)));
    const auto initialseed = u32(rand());
    cout << setprecision(20) << "initialseed=" << initialseed << ",kGamma=" << kGamma
         << ",kMinGamma=" << kMinGamma << ",kMaxTime=" << kMaxTime << ",kTotalIters=" << kTotalIters
         << "\n\n";
    mt19937 rnd{initialseed};
    i64 maxmaxans = -1;
    // static constexpr array usedseeds = getusedseeds();

    uint_fast32_t maxmaxansseed = 0;
    for (auto iter = 1024u; iter > 0; iter--) {
        const auto rndseed = rnd();
        // if (ranges::binary_search(usedseeds, rndseed)) [[unlikely]] {
        //     continue;
        // }
        auto maxans = solve(rndseed);
        if (maxans > maxmaxans) {
            maxmaxans     = maxans;
            maxmaxansseed = rndseed;
        }
    }

    cout << "\n" << maxmaxansseed << " | " << maxmaxans << '\n';
}
